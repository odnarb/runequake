/*  $Id: world.qc,v 1.85 2008/08/13 03:54:59 slotzero Exp $

    Copyright (C) 1996, 1997  Id Software, Inc.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
*/

void ()
main =
{
};

entity	lastspawn;

//=======================
/*QUAKED worldspawn (0 0 0) ?
Only used for the world entity.
Set message to the level name.
Set sounds to the cd track to play.

World Types:
0: medieval
1: metal
2: base
*/
//=======================
void ()
worldspawn =
{

          InternalInit ();
	InitBodyQue ();
	rjs_worldspawn ();
	precaches ();
	Light_Setup ();
	place_my_items ();
	IN_POQ(InitSearchHunk();)
      
      other = nextent(world);
	while (other != world)
	{
           MAX_CLIENTS = MAX_CLIENTS + 1;

           other = nextent (other);
	}
          
};

void ()
StartFrame =
{
          sys_ticrate 	= frametime; // Cobalt - same as frametime cvar ("sys_ticrate");
          framecount = framecount + 1; // Cobalt count number of frames
	check_teamplay ();
	check_console_command ();
	CheckRules ();
	spawn_runes ();
	update_client_pings ();
	IN_QW(update_deathmatch ();)
          
          CD_RNTRACK = rint (random () * 10) + 1; // Random cd track
           
          if (!intermission_running)
          if (time > CD_END && CD_START != -2)
          {
          if (time >= (((cvar ("timelimit") * 60) - 30)))
          CD_RNTRACK = 3; // Force silence if near end of level
          CDTrack ();
          CD_START = time;
         
          msg_entity = find (world, classname, "player");
	while (msg_entity != world)
	{
            if (!(msg_entity.aqflags & AQ_QUIET))
           { 
 
	WriteByte (MSG_ONE, 8);
          WriteByte(MSG_ONE, 2);
          WriteString(MSG_ONE, CD_MSG);
           }         
                    
                    
         
           
          msg_entity = find (msg_entity, classname, "player");
	}

          }
          
          
        
          
};



/*
==============================================================================

BODY QUE

==============================================================================
*/

entity	bodyque_head;

void ()
InitBodyQue =
{
	bodyque_head = spawn ();
	bodyque_head.classname = "bodyque";
	bodyque_head.owner = spawn ();
	bodyque_head.owner.classname = "bodyque";
	bodyque_head.owner.owner = spawn ();
	bodyque_head.owner.owner.classname = "bodyque";
	bodyque_head.owner.owner.owner = spawn ();
	bodyque_head.owner.owner.owner.classname = "bodyque";
	bodyque_head.owner.owner.owner.owner = bodyque_head;
};

// make a body que entry for the given ent so the ent can be
// respawned elsewhere
void (entity ent)
CopyToBodyQue =
{
	if (gamemode == MODE_HEADS)
		return;

	bodyque_head.angles	= ent.angles;
	bodyque_head.model	= ent.model;
	bodyque_head.modelindex	= ent.modelindex;
	bodyque_head.frame	= ent.frame;
	bodyque_head.colormap	= ent.colormap;

	if (ent.movetype == MOVETYPE_WALK)
	{
		dprint ("bad movetype for bodyque by ", ent.netname, "\n");
		bodyque_head.movetype	= MOVETYPE_TOSS;
	}
	else
		bodyque_head.movetype	= ent.movetype;

	bodyque_head.velocity	= ent.velocity;
	bodyque_head.flags	= 0;

	setorigin (bodyque_head, ent.origin);
	setsize (bodyque_head, ent.mins, ent.maxs);

	bodyque_head		= bodyque_head.owner;
};
